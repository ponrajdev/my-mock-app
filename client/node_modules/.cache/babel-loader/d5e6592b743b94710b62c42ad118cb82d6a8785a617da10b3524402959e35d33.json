{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getDataFromLocalStorage, saveToLocalStorage, checkLocalStorageData, clearLocalStorageData } from '../util';\nexport const postSlice = createSlice({\n  name: 'post',\n  initialState: {\n    postList: [],\n    value: 0\n  },\n  reducers: {\n    getAllPost: name => {\n      clearLocalStorageData();\n      return name;\n    },\n    setAllPost: (state, action) => {\n      if (!checkLocalStorageData()) {\n        saveToLocalStorage(action.payload);\n        state.postList = getDataFromLocalStorage();\n      } else {\n        state.postList = [];\n      }\n      state.postList = action.payload;\n    },\n    updatePost: (state, action) => {\n      let currentValue = action.payload;\n      let allPost = getDataFromLocalStorage();\n      allPost = allPost.map(item => {\n        return item.id == currentValue.id ? {\n          ...item,\n          ...currentValue\n        } : item;\n      });\n      saveToLocalStorage(allPost);\n      state.postList = getDataFromLocalStorage();\n    }\n  }\n});\nexport const {\n  getAllPost,\n  setAllPost,\n  updatePost\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"names":["createSlice","getDataFromLocalStorage","saveToLocalStorage","checkLocalStorageData","clearLocalStorageData","postSlice","name","initialState","postList","value","reducers","getAllPost","setAllPost","state","action","payload","updatePost","currentValue","allPost","map","item","id","actions","reducer"],"sources":["D:/my-mock-app/client/src/store/post.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { getDataFromLocalStorage,saveToLocalStorage,checkLocalStorageData,clearLocalStorageData } from '../util';\r\n\r\nexport const postSlice = createSlice({\r\n    name: 'post',\r\n    initialState: {\r\n      postList : [],\r\n      value: 0,\r\n    },\r\n    reducers: {\r\n      getAllPost:(name) => {\r\n        clearLocalStorageData();\r\n        return name\r\n      },\r\n      setAllPost:(state,action) => {\r\n        \r\n        if(!checkLocalStorageData()) {\r\n\r\n          saveToLocalStorage(action.payload);\r\n          state.postList = getDataFromLocalStorage();\r\n\r\n        } else {\r\n          state.postList = [];\r\n        }\r\n        state.postList = action.payload;\r\n      },\r\n      updatePost:(state,action) => {\r\n          \r\n          let currentValue  = action.payload;\r\n          let allPost = getDataFromLocalStorage();\r\n          \r\n          allPost =  allPost.map(item=>{\r\n            return item.id == currentValue.id ? { ...item,...currentValue} : item \r\n          })\r\n          saveToLocalStorage(allPost)\r\n          state.postList = getDataFromLocalStorage();\r\n\r\n      }\r\n    },\r\n  })\r\n  \r\n  \r\n  export const { getAllPost,setAllPost,updatePost } = postSlice.actions\r\n  \r\n  export default postSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,uBAAuB,EAACC,kBAAkB,EAACC,qBAAqB,EAACC,qBAAqB,QAAQ,SAAS;AAEhH,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;EACjCM,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,QAAQ,EAAG,EAAE;IACbC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAU,EAAEL,IAAI,IAAK;MACnBF,qBAAqB,EAAE;MACvB,OAAOE,IAAI;IACb,CAAC;IACDM,UAAU,EAAC,CAACC,KAAK,EAACC,MAAM,KAAK;MAE3B,IAAG,CAACX,qBAAqB,EAAE,EAAE;QAE3BD,kBAAkB,CAACY,MAAM,CAACC,OAAO,CAAC;QAClCF,KAAK,CAACL,QAAQ,GAAGP,uBAAuB,EAAE;MAE5C,CAAC,MAAM;QACLY,KAAK,CAACL,QAAQ,GAAG,EAAE;MACrB;MACAK,KAAK,CAACL,QAAQ,GAAGM,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,UAAU,EAAC,CAACH,KAAK,EAACC,MAAM,KAAK;MAEzB,IAAIG,YAAY,GAAIH,MAAM,CAACC,OAAO;MAClC,IAAIG,OAAO,GAAGjB,uBAAuB,EAAE;MAEvCiB,OAAO,GAAIA,OAAO,CAACC,GAAG,CAACC,IAAI,IAAE;QAC3B,OAAOA,IAAI,CAACC,EAAE,IAAIJ,YAAY,CAACI,EAAE,GAAG;UAAE,GAAGD,IAAI;UAAC,GAAGH;QAAY,CAAC,GAAGG,IAAI;MACvE,CAAC,CAAC;MACFlB,kBAAkB,CAACgB,OAAO,CAAC;MAC3BL,KAAK,CAACL,QAAQ,GAAGP,uBAAuB,EAAE;IAE9C;EACF;AACF,CAAC,CAAC;AAGF,OAAO,MAAM;EAAEU,UAAU;EAACC,UAAU;EAACI;AAAW,CAAC,GAAGX,SAAS,CAACiB,OAAO;AAErE,eAAejB,SAAS,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}